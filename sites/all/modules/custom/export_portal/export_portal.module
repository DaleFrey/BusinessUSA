<?php

function export_portal_theme() {
    $themes = array();
    $themes['export_portal_page'] = array(
        'template' => 'export_portal_page',
        'variables' => array(),
    );
    return $themes;
}

/**
 * Implements HOOK_menu()
 */
function export_portal_menu() {
    
  $items['export/%/%'] = array(
        'title' => 'Export.gov Portal',
        'page callback' => 'export_page',
        'access arguments' => array(true),
        'access callback' => true,
        'type' => MENU_CALLBACK,
  );
  $items['export/%'] = array(
        'title' => 'Export.gov Portal',
        'page callback' => 'export_page',
        'access arguments' => array(true),
        'access callback' => true,
        'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implementation of hook_preprocess_HOOK().
 */
function export_portal_preprocess_export_portal_page(&$variables) {
    if ( !empty($variables['url']) ) {
        $exportPageInfo = ripExportDotGovPage( $variables['url'] );
        
        $variables = array_merge( $variables, $exportPageInfo );
        
        $variables['exportTitle'] = $variables['title'];
        $variables['exportContentHTML'] = $variables['content-html'];
        $variables['exportSideBars'] = array();
        $variables['exportCachePath'] = $variables['storage-filepath'];
        
    }
}

/**
 * Page callback for /export
 *
 * All pages from /export/* shall execute this function 
 * This function shall look at the Excel-DataSource file associated with the Export-Dashboard, and 
 * determin the target path that is referenced on the export.gov site.
 *
 * The way it shall do this is by looking up what row in the Excel-DataSource file matches with
 * the dashboard_cateory_title column with A, and (dashboard_link_title OR topic_post) column 
 * matches B, when looking at the URL /export/A/B/C
 */
function export_page() { /* Coder Bookmark: CB-JDSQWX0-BC */
    
    $urlPathTargeted = arg();
    array_shift($urlPathTargeted);
    if ( count($urlPathTargeted) > 1 ) {
        $urlDirectoryA = getEasyCompareString( $urlPathTargeted[0] );
        $urlDirectoryB = getEasyCompareString( $urlPathTargeted[1] );
    }
    
    // If the user is simply going to the URL of /export, then redner the Exporter-Dashboard
    if ( request_uri() === '/export' || request_uri() === '/export/' ) {
        exit('Hmm, this line is hit? /* Coder Bookmark: CB-ZN1JJ2C-BC */');
    }
    
    // Manage aliases/exceptions - When a user goes to the following URLs, they should be redirected to another location, despite this function's functionality
    $ruri = request_uri();
    $ruri = ltrim($ruri, '/');
    $ruri = rtrim($ruri, '/');
    if (
        $ruri == 'export/safeharbor'
        || $ruri == 'export/ecr'
        || $ruri == 'export/ibp'
        || $ruri == 'export/nei'
        || $ruri == 'export/fta'
        || $ruri == 'export/cemark'
        || $ruri == 'export/industry'
        || $ruri == 'export/country'
        || $ruri == 'export/usoffices'
        || $ruri == 'export/e2c2'
        || $ruri == 'export/ctm'
        || $ruri == 'export/advocacy'
        || $ruri == 'export/tradefinanceguide'
        || $ruri == 'export/basicguide'
        || $ruri == 'export/exportbasics'
    ) {
        if($ruri=="export/fta"){
            $ruri="export/FTA/index.asp";
        }
        @ob_end_clean();
        @ob_end_clean();
        @ob_end_clean();
        header('Location: /' . str_replace('export/', 'export-portal?', $ruri));
        exit();
    }
    
    // Load all mappings for the Export Dashboard - load this information into an array
    $mappingsFilePath = variable_get('exporter_dashboard_mappings_filepath', drupal_get_path('module', 'exporter_dashboard') . '/export-dashboard-mappings.xls' );
    $mappings = export_portal_excelToArray($mappingsFilePath);
    
    // Foreach row in this spreadsheet...
    foreach ( $mappings as $mapping ) {
        
        // Comparisons 
        $dashboard_cateory_title = getEasyCompareString( $mapping['assoc']['dashboard_cateory_title'] );
        $dashboard_link_title = getEasyCompareString( $mapping['assoc']['dashboard_link_title'] );
        $topic_post = getEasyCompareString( $mapping['assoc']['topic_post'] );
        
        $dashboardCategoryTitleMatches = ( $urlDirectoryA ==  $dashboard_cateory_title); // Compare the dashboard_cateory_title column with A, when looking at the URL /export/A/B/C
        $dashboardLinkTitleMatches = ( $urlDirectoryB == $dashboard_link_title ); // Compare the dashboard_link_title column with B, when looking at the URL /export/A/B/C
        $topicPostMatches = ( $urlDirectoryB == $topic_post ); // Compare the topic_post column with B, when looking at the URL /export/A/B/C
        
        // Comparisons check = dashboard_cateory_title column with A, and (dashboard_link_title OR topic_post) column matches B, when looking at the URL /export/A/B/
        if ( $dashboardCategoryTitleMatches && ( $dashboardLinkTitleMatches || $topicPostMatches ) ) {
            
            // We have found it
            $target = $mapping['assoc']['dashboard_link_url'];
            
            // If this is a link not pointing to export.gov, redirect the user there
            if ( strpos($target, 'http://export.gov') === false && strpos($target, 'http://www.export.gov') === false ) {
                drupal_goto( $target );
                return $target;
            }
            
            // Screen-scrape the target
            $pageData = ripExportDotGovPage( $target ); //  NOTE: ripExportDotGovPage() is defined in ConsumeData-Export.govSiteRip.php
            
            // Determin the Category and sub-category for the breadcrumb
            $breadcrumbCategory = $mapping['assoc']['section'];
            $breadcrumbSubCategory = $mapping['assoc']['subsection'];
            if ( !empty($_GET['cat']) ) { // There may or may not be a cat parameter in the URL-query which shall be used to override this breadcrumb (this is used when there are suplicated in the Exporter-Dashboard Data-Source spreadsheet)
                $breadcrumbCategory = ucwords($_GET['cat']);
            }
            if ( !empty($_GET['subcat']) ) { // There may or may not be a cat parameter in the URL-query which shall be used to override this breadcrumb (this is used when there are suplicated in the Exporter-Dashboard Data-Source spreadsheet)
                $breadcrumbSubCategory = ucwords($_GET['subcat']);
            }
            
            // Alter breadcrumb titles (category-title update)
            $breadcrumbCategory = str_replace('Learn', 'Learn More', $breadcrumbCategory);
            $breadcrumbCategory = str_replace('Comply', 'Compliance Resources', $breadcrumbCategory);
            $breadcrumbCategory = str_replace('Assistance and Opportunities', 'Seek Assistance', $breadcrumbCategory);
            $category = ($breadcrumbCategory == 'Learn More' ? 'learn' : ($breadcrumbCategory == 'Compliance Resources' ? 'comply' : ($breadcrumbCategory == 'Seek Assistance' ? 'assistanceandopportunities' : '')) );
            $breadcrumbSubCategory = str_replace('Research', 'Research Tools', $breadcrumbSubCategory);
            $breadcrumbSubCategory = str_replace('Consulting', 'Consulting Support', $breadcrumbSubCategory);
            $breadcrumbSubCategory = str_replace('Certify', 'Certification', $breadcrumbSubCategory);
            $breadcrumbSubCategory = str_replace('Ship', 'Shipping', $breadcrumbSubCategory);
            $breadcrumbSubCategory = str_replace('Document', 'Documentation', $breadcrumbSubCategory);
            $breadcrumbSubCategory = str_replace('Contacts', 'Contacts for Basic Assistance', $breadcrumbSubCategory);
            $breadcrumbSubCategory = str_replace('Export Finance', 'For Financing', $breadcrumbSubCategory);
            $breadcrumbSubCategory = str_replace('Trade Problems', 'For Trade Problems', $breadcrumbSubCategory);
            $subcategory =
                ($breadcrumbSubCategory == 'Research Tools' ? 'research' : ($breadcrumbSubCategory == 'Consulting Support' ? 'consulting' : ($breadcrumbSubCategory == 'Certification' ? 'certify' : (($breadcrumbSubCategory == 'Shipping' ? 'ship' :
                    ($breadcrumbSubCategory == 'Documentation' ? 'document' : ($breadcrumbSubCategory == 'Contacts for Basic Assistance' ? 'contacts' :
                        ($breadcrumbSubCategory == 'For Financing' ? 'exportfinance' : ($breadcrumbSubCategory == 'For Trade Problems' ? 'tradeproblems' : strtolower($breadcrumbSubCategory )))) ))))));
            
            // Set Breadcrumbs
            $breadcrumb = array();
            $breadcrumb[] = l('Home', '<front>');
            $breadcrumb[] = "<a href=\"/export\">Explore Exporting</a>"; // Exporter Dashboard - Splash page
            $breadcrumb[] = "<a href='/export#$category'>{$breadcrumbCategory}</a>"; // Exporter Dashboard - Choose subcategory
            $breadcrumb[] = "<a href='/export#$category-$subcategory'>{$breadcrumbSubCategory}</a>";  // Exporter Dashboard - Results page
            $breadcrumb[] = $pageData['title']; // Link to current URL
            drupal_set_breadcrumb($breadcrumb);
            
            // With the $pageData obtained, render this information in the appropriate template
            $variables = array(
                'category' => $mapping['assoc']['section'],
                'subcategory' => $mapping['assoc']['subsection'],
                'exportTitle' => $pageData['title'], /* $exportTitle is a variable expected to be declared in the export-landing-page.tpl.php template (see that file for more information) */
                'exportContentHTML' => $pageData['content-html'], /* $exportContentHTML is a variable expected to be declared in the export-landing-page.tpl.php template (see that file for more information) */
                'exportSideBars' => getExportRelatedContent( $urlPathTargeted[0], $urlPathTargeted[1] ), /* $exportSideBars is a variable expected to be declared in the export-landing-page.tpl.php template (see that file for more information) */
                'exportCachePath' => $pageData['storage-filepath']
            );
            
            ob_start();
            print theme('export_portal_page', $variables);
            $html = ob_get_contents();
            ob_end_clean();
            return $html;
        }
        
    }
    
    return "
        <b>Unknown target</b><br/>
        <hr/>
        coulmn dashboard_cateory_title = {$urlDirectoryA}<br/>
        AND<br/>
        coulmn dashboard_link_title = {$urlDirectoryB}<br/>
        <br/>
        ...was not found on the spreadsheet
    ";
}

/** array ripExportDotGovPage()
  * 
  * Rips content from a target Export.gov page
  *
  * Given a URL, returns an array with the following elements:
  *     'title' => Title for the target document
  *     'url' => The URL supplied to this function
  *     'navigation-links' => A list of array('url' => Target URL-path, 'title' => Anchor title of the link),
  *     'navigation-html' => The HTML of the navigation area on the target page
  *     'images' => An array of URLs in which this page loads images from
  *     'content-html' => The HTML within the main content div on the target page
  *
  * Example return would be:
  
Array
(
    [title] => Export.gov - FTA
    [url] => http://export.gov/FTA/index.asp
    [navigation-links] => Array(
        [Free Trade Agreements] => Array(
            [0] => Array(
                [url] => export.gov/FTA/../FTA/index.asp
                [title] => Free Trade Agreements Home
            )
            [1] => Array(
                [url] => export.gov/FTA/../FTA/australia/index.asp
                [title] => Australia
            )
        )
        [Related Topics] => Array(
            [0] => Array(
                [url] => export.gov/FTA/../FTA/ftatarifftool/index.asp
                [title] => FTA�Tariff Tool
            )
            [1] => Array(
                [url] => export.gov/FTA/tcc.export.gov/
                [title] => Trade Compliance Center
            )
        )
    )
    [navigation-html] => ' <div id="frameleftcol"> <!-- more HTML markup -->'
    [images] => Array(
        [0] => 'http://export.gov/build/groups/public/@eg_main/documents/webcontent/eg_main_020105.jpg'
        [1] => 'http://export.gov/build/groups/public/@eg_main/@logistics/documents/webcontent/eg_main_020604.jpg'
        [2] => 'http://export.gov/build/groups/public/@eg_main/documents/webcontent/eg_main_020605.jpg'
    )
  
  */
function ripExportDotGovPage($url) {
    
    if ( strpos($url, 'tcc.export.gov') !== false ) {
        return ripExportDotGovPage_tccSubDomain($url);
    }
    
    // This is our return buffer
    $ret = array(
        'title' => '',
        'url' => $url,
        'navigation-links' => array(),
        'navigation-html' => array(),
        'images' => array(),
        'content-html' => '',
        'content-links' => array()
    );
    
    // Fetch the target export.gov $url either from export.gov, or from storage (if it is stored), this function will also cache/store the data if that has not already been done
    $exportDataSource = fetchExportDotGovData($url);
    $ret = array_merge($ret, $exportDataSource); // Marge the return infromation from fetchExportDotGovData() into the return buffer fo this function
    
    // If this ($url) is an image, then there is nothing to parse
    if ( $exportDataSource['is-image'] === true ) {
        return $ret;
    }
    
    // Get ready to parse the HTML of this ($url) page
    $html = $exportDataSource['export-data-source'];
    $doc = new DOMDocument();
    @$doc->loadHTML($html);
    $xpath = new DomXPath($doc);
    
    // Ge the title of this webpage - If nothing better is found, use the HTML-title
    $titleTags = $xpath->query('//title');
    foreach ( $titleTags as $titleTag ) {
        $ret['title'] = $titleTag->nodeValue;
    }
    $firstHeadingDiv = $xpath->query('//div[@id="framemaincol2"]//div[@class="heading"][1]');
    foreach ( $firstHeadingDiv as $theFirstHeadingDiv ) {
        if ( strval($theFirstHeadingDiv->nodeValue) !== '' ) {
            $ret['title'] = $theFirstHeadingDiv->nodeValue;
        }
        break;
    }
    $h1Tag = $xpath->query('//h1[@class="Header-1"][1]');
    foreach ( $h1Tag as $theH1Tag ) {
        if ( strval($theH1Tag->nodeValue) !== '' ) {
            $ret['title'] = $theH1Tag->nodeValue;
        }
        break;
    }
    
    // Try to find the navigation area of this document
    $naviContentArea = $xpath->query('//div[@id="frameleftcol"]');
    if ( $naviContentArea->length !== 0 ) {
        foreach ( $naviContentArea as $theNaviArea ) {
            $ret['navigation-html'] = $doc->saveXML($theNaviArea);
        }
    } else {
        $naviContentArea = $xpath->query('//table[@id="LeftMenu"]');
        foreach ( $naviContentArea as $theNaviArea ) {
            $ret['navigation-html'] = $doc->saveXML($theNaviArea);
            break;
        }
    }

    // If we found the navigation area of this page, get the links within this navigation section
    if ( $naviContentArea->length !== 0 ) {
        
        $navSectionTitles = $xpath->query('//div[@id="frameleftcol"]//div[@class="sideshead"]');
        foreach ( $navSectionTitles as $sectionIndex => $navSectionTitle ) {
            
            $navSectionTitleText = $navSectionTitle->nodeValue;
            $ret['navigation-links'][$navSectionTitleText] = array();
            
            $thisSectionNaviAnchors = $navSectionLists = $xpath->query('(//div[@id="frameleftcol"]//div[@class="ls"])[' . ($sectionIndex+1) . ']//a');
            foreach ( $thisSectionNaviAnchors as $naviAnchor ) {
                $linkURL = getLinkAbsolutePath($url, $naviAnchor->getAttribute('href'));
                $linkURL = canonicalizeUrl($linkURL);
                
                $linkTitle = $naviAnchor->nodeValue;
                $ret['navigation-links'][$navSectionTitleText][] = array(
                    'url' => $linkURL,
                    'title' => $linkTitle
                );
            }
        }
        
        $naviAnchors = $xpath->query('//div[@id="frameleftcol"]//a');
    } 
    
    // Try to find the main content area id of this document
    $mainContentAreaXPath = false;
    $testXPath = '//div[@id="framemaincol"]';
    if ( $xpath->query($testXPath)->length !== 0 ) {
        $mainContentAreaXPath = $testXPath;
    }
    $testXPath = '//div[@id="framemaincol2"]';
    if ( $xpath->query($testXPath)->length !== 0 ) {
        $mainContentAreaXPath = $testXPath;
    }
    
    // If we found the main content area...
    if ( $mainContentAreaXPath !== false ) {
        
        // Search for any images within this area
        $foundImages = $xpath->query($mainContentAreaXPath . '//img');
        foreach ( $foundImages as $foundImage ) {
            
            // Force the image-source to be an absolute path
            $imageSrc = getLinkAbsolutePath($url, $foundImage->getAttribute('src')); // Note: getLinkAbsolutePath() is defined in Miscellaneous-SharedFunctions.php
            $imageSrc = canonicalizeUrl($imageSrc); // Note: canonicalizeUrl() is defined in Miscellaneous-SharedFunctions.php
            
            // We shall note that this is an image dependency for this piece of content in the return
            $ret['images'][] = str_replace('http://', '', $imageSrc); 
            
            // If the image-source points to export.gov, switch it over to using the BusinessUSA-export-portal
            $imageSrc = str_replace('http://export.gov/', '/export-portal?', $imageSrc);
            $imageSrc = str_replace('http://www.export.gov/', '/export-portal?', $imageSrc);
            
            $foundImage->setAttribute('src', $imageSrc); 
        }
        
        // Search for any links within this area
        $foundAnchors = $xpath->query($mainContentAreaXPath . '//a');
        foreach ( $foundAnchors as $foundAnchor ) {
            if ( $foundAnchor->hasAttribute('href') ) {
            
                $anchorHref = getLinkAbsolutePath($url, $foundAnchor->getAttribute('href')); // Note: getLinkAbsolutePath() is defined in Miscellaneous-SharedFunctions.php
                $anchorHref = canonicalizeUrl($anchorHref);
                
                // We shall note this link in the return
                $ret['content-links'][] = $anchorHref;
                
                // If this is a link to export.gov, redirect this link to point through the Export-Portal on BusinessUSA
                $anchorHref = str_replace('http://export.gov/', '/export-portal?', $anchorHref);
                $anchorHref = str_replace('http://www.export.gov/', '/export-portal?', $anchorHref);
                
                // Force the anchor-href to be an absolute path
                $foundAnchor->setAttribute('href', $anchorHref); 
                
            } else {
                
                // HTML-anchors that do not link to anything shall be stripped out - this is a bug-killer for an issue where the $doc->saveXML() parser is inappropriately wrapping following content into anchors
                $foundAnchor->parentNode->removeChild($foundAnchor);
                
            }
        }
        
    }
    
    // Grab the content-area's HTML
    foreach ( $xpath->query($mainContentAreaXPath) as $div ) {
        $ret['content-html'] = $doc->saveXML($div);
    }
    
    // Ensure this page is saved in the Drupal database, this is only done to ensure that content extracted from export.gov gets indexed into Solr
    saveExportDotGovSiteRip($ret['title'], $ret['content-html'], $url);
    
    return $ret;
    
}

function ripExportDotGovPage_tccSubDomain($url) {

    // This is our return buffer
    $ret = array(
        'title' => '',
        'url' => $url,
        'navigation-links' => array(),
        'navigation-html' => array(),
        'images' => array(),
        'content-html' => '',
        'content-links' => array()
    );
    
    // Fetch the target export.gov $url either from export.gov, or from storage (if it is stored), this function will also cache/store the data if that has not already been done
    $exportDataSource = fetchExportDotGovData($url);
    $ret = array_merge($ret, $exportDataSource); // Marge the return infromation from fetchExportDotGovData() into the return buffer fo this function
    
    // If this ($url) is an image, then there is nothing to parse
    if ( $exportDataSource['is-image'] === true ) {
        return $ret;
    }
    
    // Get ready to parse the HTML of this ($url) page
    $html = $exportDataSource['export-data-source'];
    $doc = new DOMDocument();
    @$doc->loadHTML($html);
    $xpath = new DomXPath($doc);
    
    // Ge the title of this webpage - If nothing better is found, use the HTML-title
    $titleTags = $xpath->query('//title');
    foreach ( $titleTags as $titleTag ) {
        $ret['title'] = $titleTag->nodeValue;
    }
    $firstHeadingDiv = $xpath->query('//p[@class="heading"]');
    foreach ( $firstHeadingDiv as $theFirstHeadingDiv ) {
        if ( strval($theFirstHeadingDiv->nodeValue) !== '' ) {
            $ret['title'] = $theFirstHeadingDiv->nodeValue;
            break;
        }
    }
    
    // Try to find the navigation area of this document
    $naviContentArea = $xpath->query('//table[@id="LeftMenu"]');
    foreach ( $naviContentArea as $theNaviArea ) {
        $ret['navigation-html'] = $doc->saveXML($theNaviArea);
        break;
    }
    
    // If we found the navigation area of this page, get the links within this navigation section
    if ( $naviContentArea->length !== 0 ) {
        
        $navSectionTitles = $xpath->query('//div[@class="sideshead"]/text()');
        foreach ( $navSectionTitles as $sectionIndex => $navSectionTitle ) {
            
            $navSectionTitleText = $navSectionTitle->nodeValue;
            $ret['navigation-links'][$navSectionTitleText] = array();
            
            $thisSectionNaviAnchors = $navSectionLists = $xpath->query('(//div[@class="sides"])[' . ($sectionIndex+1) . ']//a');
            foreach ( $thisSectionNaviAnchors as $naviAnchor ) {
                $linkURL = getLinkAbsolutePath($url, $naviAnchor->getAttribute('href'));
                $linkURL = canonicalizeUrl($linkURL);
                
                $linkTitle = $naviAnchor->nodeValue;
                $ret['navigation-links'][$navSectionTitleText][] = array(
                    'url' => $linkURL,
                    'title' => $linkTitle
                );
            }
        }
        
        $naviAnchors = $xpath->query('//div[@id="frameleftcol"]//a');
    } 
    
    // Try to find the main content area id of this document
    $mainContentAreaXPath = false;
    $testXPath = '(//p[@class="heading"]/..)[1]';
    if ( $xpath->query($testXPath)->length !== 0 ) {
        $mainContentAreaXPath = $testXPath;
    }
    
    // If we found the main content area...
    if ( $mainContentAreaXPath !== false ) {
        
        // Search for any images within this area
        $foundImages = $xpath->query($mainContentAreaXPath . '//img');
        foreach ( $foundImages as $foundImage ) {
            
            // Force the image-source to be an absolute path
            $imageSrc = getLinkAbsolutePath($url, $foundImage->getAttribute('src')); // Note: getLinkAbsolutePath() is defined in Miscellaneous-SharedFunctions.php
            $imageSrc = canonicalizeUrl($imageSrc);
            
            // We shall note that this is an image dependency for this piece of content in the return
            $ret['images'][] = str_replace('http://', '', $imageSrc); 
            
            // If the image-source points to export.gov, switch it over to using the BusinessUSA-export-portal
            $imageSrc = str_replace('http://export.gov/', '/export-portal?', $imageSrc);
            $imageSrc = str_replace('http://www.export.gov/', '/export-portal?', $imageSrc);
            $imageSrc = str_replace('http://tcc.export.gov/', '/export-portal?tcc/', $imageSrc);
            
            $foundImage->setAttribute('src', $imageSrc); 
        }
        
        // Search for any links within this area
        $foundAnchors = $xpath->query($mainContentAreaXPath . '//a');
        foreach ( $foundAnchors as $foundAnchor ) {
            if ( $foundAnchor->hasAttribute('href') ) {
            
                $anchorHref = getLinkAbsolutePath($url, $foundAnchor->getAttribute('href')); // Note: getLinkAbsolutePath() is defined in Miscellaneous-SharedFunctions.php
                $anchorHref = canonicalizeUrl($anchorHref);
                
                // We shall note this link in the return
                $ret['content-links'][] = $anchorHref;
                
                // If this is a link to export.gov, redirect this link to point through the Export-Portal on BusinessUSA
                $anchorHref = str_replace('http://export.gov/', '/export-portal?', $anchorHref);
                $anchorHref = str_replace('http://www.export.gov/', '/export-portal?', $anchorHref);
                $anchorHref = str_replace('http://tcc.export.gov/', '/export-portal?tcc/', $anchorHref);
                
                // Force the anchor-href to be an absolute path
                $foundAnchor->setAttribute('href', $anchorHref); 
                
            } else {
                
                // HTML-anchors that do not link to anything shall be stripped out - this is a bug-killer for an issue where the $doc->saveXML() parser is inappropriately wrapping following content into anchors
                $foundAnchor->parentNode->removeChild($foundAnchor);
                
            }
        }
        
    }
    
    // Grab the content-area's HTML
    foreach ( $xpath->query($mainContentAreaXPath) as $div ) {
        $ret['content-html'] = $doc->saveXML($div);
    }
    
    // Ensure this page is saved in the Drupal database, this is only done to ensure that content extracted from export.gov gets indexed into Solr
    saveExportDotGovSiteRip($ret['title'], $ret['content-html'], $url);
    
    // Check if there are any references to export.gov in the parsed data, if so, notify the BusinessUSA development team
    if ( strpos( strip_tags($ret['content-html']), 'export.gov') !== false ) {
        call_user_func_cache(604800, 'debugEmail',
            'critical', 
            "A reference to export.gov may have been rendered on a Export.gov-content landing page <a href=\"https://{$_SERVER['SERVER_NAME']}{$_SERVER['REQUEST_URI']}\">here</a>.<br/>" . 
            "In general, we want to remove all these references, and/or replace them with a reference to BusinessUSA. If you log in as an administrator and goto this page, you can edit the export.gov-cache this page is based on.<br/>" . 
            "<small><i>This message is triggered from the execution of ConsumeData-Export.govSiteRip.php::ripExportDotGovPage('{$url}')</i>, Coder Bookmark: CB-VQJCZMM-BC</small>"
        );
    }
    
    return $ret;

}


function fetchExportDotGovData($url) {
    
    $exportContentDir = 'sites/default/files/export-gov-content';
    
    $urlInfo = parse_url($url);
    
    // Determin the storage path
    $pathInfo = pathinfo( $urlInfo['path'] );
    $targetStorageDir = $exportContentDir . $pathInfo['dirname'];
    $targetStoragePath = $exportContentDir . rtrim($urlInfo['path'], '/') . '.store';
    if ( strpos($url, 'tcc.export.gov') !== false ) {
        $targetStorageDir = $exportContentDir . '/tcc.export.gov' . $pathInfo['dirname'];
        $targetStoragePath = $exportContentDir . '/tcc.export.gov' . rtrim($urlInfo['path'], '/') . '.store';
    }
    
    // Return defaults
    $newlySavedInStorage = false;
    $pulledFromStorage = false;
    $specialHeaders = array();
    
    // Determin weather or not the target URL path references an image
    switch( strtolower($pathInfo['extension']) )
    {
        case 'png';
        case 'jpg';
        case 'jpeg';
        case 'gif';
        case 'img';
            $isImage = true;
            $specialHeaders[] = 'Content-Type: image/' . $pathInfo['extension'];
            break;
            
        default;
            $isImage = false;
            break;
    }
    
    // Determin weather or not the target URL path references a pdf/excel/file-attachment
    switch( strtolower($pathInfo['extension']) )
    {
        case 'pdf';
        case 'xls';
        case 'xlsx';
        case 'csv';
            $isFileAttachment = true;
            $specialHeaders[] = 'Content-Type: application/' . $pathInfo['extension'];
            break;
            
        default;
            $isFileAttachment = false;
            break;
    }
    if ( $isImage ) {
        $isFileAttachment = true;
    }
    
    // Ensure the $exportContentDir directory exists
    if ( !is_dir($exportContentDir) ) {
        if ( !mkdir($exportContentDir) ) {
            print "Fatal Error - Could not create directory $exportContentDir";
            error_log("Fatal Error - Could not create directory $exportContentDir");
        }
    }
    
    // Ensure the $targetStorageDir exists for caching/storage purposes
    if ( !is_dir($targetStorageDir) ) {
        if ( !mkdir($targetStorageDir, 0777, true) ) {
            error_log("Error - fetchExportDotGovPage() could not create directory $targetStorageDir");
        }
    }
    
    // If the file exists, pull this data from storage
    if ( file_exists($targetStoragePath) ) {
        $data = file_get_contents( $targetStoragePath );
        $pulledFromStorage = true;
    } else {
        
        error_log("fetchExportDotGovPage() is pulling data from $url");
        $data = curl_get_contents($url); // we need to pull the data for this page/file
        
        // Detect if this is a redirection page
        $dataHeaders = get_headers($url, 1);
        if ( !empty($dataHeaders['Location']) ) {
            $data = 'Location: ' . $dataHeaders['Location'];
        }
        
        if ( $data !== false ) {
            $bytesWritten = @file_put_contents($targetStoragePath, $data); // Store this page/file for later retrieval 
            if ( intval($bytesWritten) > 1 && $bytesWritten !== false ) {
                $newlySavedInStorage = true;
                error_log("fetchExportDotGovPage() has cached a page/image at $targetStoragePath");
            } else {
                error_log("CRITICAL ERROR - fetchExportDotGovPage() could not cache a page/image to $targetStoragePath");
            }
        }
    }
    
    if ( strpos(strval($data), 'Location: ') === 0 ) {
        $redirectUrl = trim(substr($data, 9));
        $redirectUrl = str_replace('http://export.gov/', '/export-portal?', $redirectUrl);
        $redirectUrl = str_replace('http://tcc.export.gov/', '/export-portal?tcc/', $redirectUrl);
        $specialHeaders[] = 'Location: ' . $redirectUrl;
    }
    
    // Return 
    return array(
        'export-data-source' => $data,
        'pathInfo' => $pathInfo,
        'urlInfo' => $urlInfo,
        'is-image' => $isImage,
        'is-file-attachment' => $isFileAttachment,
        'special-headers' => $specialHeaders,
        'pulled-from-storage' => $pulledFromStorage,
        'newly-saved-in-storage' => $newlySavedInStorage,
        'storage-filepath' => $targetStoragePath
    );    
}

function saveExportDotGovSiteRip($title, $content, $url) {
    
    // Bail if the required content-type nor CType's field doesn't exist
    if ( db_table_exists('field_data_field_exportrip_origin') !== true ) {
        return array(
            'nid' => false,
            'saved-new' => false,
        );
    }
    
    // Bail if a node under the export_gov_micro_site_page content-type already exists with this title
    // This is coded to ensure "duplicates" are not created in Solr
    $count = db_query("SELECT COUNT(n.nid) FROM node n WHERE n.type='export_gov_micro_site_page' AND n.title='{$title}' ")->fetchField();
    if ( intval($count) > 0 ) {
        return array(
            'nid' => false,
            'saved-new' => false,
        );
    }
    
    $url = str_replace('http://', '', $url);
    $url = str_replace('https://', '', $url);
    
    // We will not handle any URL-queries with ripped pages from export.gov
    if ( strpos($url, '?') !== false ) {
        $url = explode('?', $url);
        $url = $url[0];
    }
    
    $content = strip_tags($content);
    $content = html_entity_decode($content);
    $content = trim($content);
    
    // Check if there alreeady exists a export_gov_micro_site_page node for this page
    $results = db_query("
        SELECT 
            n.title AS 'title', 
            n.nid AS 'nid'
        FROM node n 
        LEFT JOIN field_data_field_exportrip_origin orig ON ( orig.entity_id = n.nid )
        WHERE 
            n.type='export_gov_micro_site_page'
            AND orig.field_exportrip_origin_value = '{$url}'
    ");
    foreach ( $results as $record ) {
        // If this line is hit, then that means a record was returned for the query, which should not happen unless there is already a export_gov_micro_site_page node in the database for this ripData['url']
        return array(
            'nid' => $record->nid,
            'saved-new' => false,
        );
    }
    
    // Pull the user ID of sys_exportgov_siteripper - this will be the user/author of the new node created 
    $userObj = user_load_by_name('sys_exportgov_siteripper');
    $authorId = $userObj->uid;
    
    // Construct new node
    $node = new StdClass();
    $node->type = 'export_gov_micro_site_page';
    $node->title = $title;
    $node->status = 1;
    $node->uid = $authorId;
    $node->field_exportrip_origin = array(
        'und' => array(
            0 => array(
                'value' => $url,
                'format' => null,
                'safe_value' => $url
            )
        )
    );
    $node->field_exportrip_content = array(
        'und' => array(
            0 => array(
                'value' => $content,
                'format' => 'full_html',
                'safe_value' => $content
            )
        )
    );
    
    // Save this new node
    node_save($node);
    
    // Ensure this node will get sent into the Solr search-index
    if ( !empty($node->nid) && function_exists('apachesolr_mark_node') ) {
        apachesolr_mark_node($node->nid);
    }
    
    return array(
        'nid' => $node->nid,
        'saved-new' => true,
    );
}

function getExportRelatedContent($searchByDashboardCateoryTitle, $dashboardLinkTitle = '') {
    
    // Ensure that $searchByDashboardCateoryTitle has spaces instead of dashes
    $searchByDashboardCateoryTitle = str_replace('-', ' ', $searchByDashboardCateoryTitle);
    $cmpSearchByDashboardCateoryTitle = getEasyCompareString($searchByDashboardCateoryTitle);
    
    // Return buffer and tracking 
    $ret = array();
    $ret[$searchByDashboardCateoryTitle] = array();
    $retLinkTitles = array(); // This variable is going to be used to track what link-titles are registered to return. This will be used to track, and not return duplicates
    
    // Ensure we have our helper functions for use with the PHPExcel library declared
    if ( function_exists('excelToArray') == false ) {
        include_once('sites/all/libraries/PHPExcelHelper/phpexcel-helper-functions.php');
    }
    
    // Load all mapps from an Excel spreadsheet - load this information into an array
    $mappingsFilePath = variable_get('exporter_dashboard_mappings_filepath', drupal_get_path('module', 'exporter_dashboard') . '/export-dashboard-mappings.xls' );
    $mappings = excelToArray($mappingsFilePath); // Note: excelToArray() is defined in phpexcel-helper-functions.php
    
    // If the title of the page the user is on is referenced in the topic_post column of the spreadhseet, then also filter by dashboard_link_title
    $filterDashboardLinkTitle = false;
    if ( $dashboardLinkTitle !== '' ) {
        $topicPostRow = exportDashboardDataSource_FindByTopicPost($dashboardLinkTitle);
        if ( $topicPostRow !== false ) {
            $filterDashboardLinkTitle = getEasyCompareString( $topicPostRow['assoc']['dashboard_link_title'] );
        }
    }
    
    // Foreach row in this spreadhseet...
    foreach ( $mappings as $mapping ) {
        
        $thisRowDashboardCateoryTitle = getEasyCompareString( $mapping['assoc']['dashboard_cateory_title'] );
        $thisRowLinkTitle = getEasyCompareString( $mapping['assoc']['dashboard_link_title'] );
        $thisRowAltSection = getEasyCompareString( $mapping['assoc']['altsection'] );
        
        // Check if this row describes a page with this ($searchByDashboardCateoryTitle) dashboard_cateory_title
        if ( 
            $cmpSearchByDashboardCateoryTitle == $thisRowDashboardCateoryTitle 
            && ( $filterDashboardLinkTitle === false || $filterDashboardLinkTitle == $thisRowLinkTitle )
        ) {
            
            // Validation and checking
            $warning = false;
            
            // Validation and checking - Make sure there was a title given
            $linkTitle = $mapping['assoc']['dashboard_link_title'];
            if ( trim(strval($mapping['assoc']['topic_post'])) !== '' ) {
                $linkTitle = $mapping['assoc']['topic_post'];
            }
            if ( strval($linkTitle) === '' ) {
                $linkTitle = 'No title given in spreadsheet';
                $warning = true;
            }
            
            // Determin the URL-path for this link
            $linkUrl = $mapping['assoc']['dashboard_link_url'];
            if ( strval($mapping['assoc']['dashboard_cateory_title']) !== '' && strval($mapping['assoc']['dashboard_link_title']) !== '' ) {
                $dashboardCateoryTitle = $mapping['assoc']['dashboard_cateory_title'];
                $dashboardCateoryTitle = getEasyCompareString($dashboardCateoryTitle, null, true, true, true, '-'); // Replace all dashes, slashes, Unicode, punctuations, etc, with dashes
                $dashboardLinkTitle = $mapping['assoc']['dashboard_link_title'];
                $dashboardLinkTitle = getEasyCompareString($dashboardLinkTitle, null, true, true, true, '-'); // Replace all dashes, slashes, Unicode, punctuations, etc, with dashes
                $linkUrl = '/export/' . $dashboardCateoryTitle . '/' . $dashboardLinkTitle;
            }
            if ( strval($mapping['assoc']['dashboard_cateory_title']) !== '' && strval($mapping['assoc']['topic_post']) !== '' ) {
                $dashboardCateoryTitle = $mapping['assoc']['dashboard_cateory_title'];
                $dashboardCateoryTitle = getEasyCompareString($dashboardCateoryTitle, null, true, true, true, '-'); // Replace all dashes, slashes, Unicode, punctuations, etc, with dashes
                $topicPost = $mapping['assoc']['topic_post'];
                $topicPost = getEasyCompareString($topicPost, null, true, true, true, '-'); // Replace all dashes, slashes, Unicode, punctuations, etc, with dashes
                $linkUrl = '/export/' . $dashboardCateoryTitle . '/' . $topicPost;
            }
            
            // Validation and checking - Make sure there was a link given
            if ( strval($linkUrl) === '' ) {
                $linkUrl = "javascript: alert('No URL given in spreadhseet');";
                $warning = true;
            }
            
            // If this link points to this page (the page request that is executing this PHP-thread), hilight this link
            $ruri = request_uri();
            $ruri = strtolower($ruri);
            $ruri = str_replace(' ', '', $ruri);
            $ruri = str_replace('-', '', $ruri);
            $ruri = trim($ruri, '/');
            if ( strpos($ruri, '?') !== false ) { // If there is a URL-query in this URL, remove it
                $ruri = explode('?', $ruri);
                $ruri = $ruri[0];
            }
            $cmpURL = $linkUrl;
            $cmpURL = strtolower($cmpURL);
            $cmpURL = str_replace(' ', '', $cmpURL);
            $cmpURL = str_replace('-', '', $cmpURL);
            $cmpURL = trim($cmpURL, '/');
            if ( strpos($cmpURL, '?') !== false ) { // If there is a URL-query in this URL, remove it
                $cmpURL = explode('?', $cmpURL);
                $cmpURL = $cmpURL[0];
            }
            $hilight = ( $ruri === $cmpURL );
            
            // We are about to add to the return buffer, make sure we will not be creating a duplicate
            if ( !in_array($linkTitle, $retLinkTitles) ) {
            
                // We will want to return pages information under the (dashboard_cateory_title) array
                $retLinkTitles[] = $linkTitle;
                $ret[$searchByDashboardCateoryTitle][] = array(
                    'url' => $linkUrl,
                    'title' => $linkTitle,
                    'warning' => $warning,
                    'hilight' => $hilight
                );
            }
            
        }
        
    }
    
    return $ret;
}

function exportDashboardDataSource_FindByTopicPost($checkString) {
    
    $checkString = getEasyCompareString($checkString);
    
    // Load all mapps from an Excel spreadsheet - load this information into an array
    $mappingsFilePath = variable_get('exporter_dashboard_mappings_filepath', drupal_get_path('module', 'exporter_dashboard') . '/export-dashboard-mappings.xls' );
    $mappings = export_portal_excelToArray($mappingsFilePath);
    
    // Foreach row in this spreadhseet...
    foreach ( $mappings as $mapping ) {
        
        $thisRowTopicPost = getEasyCompareString( $mapping['assoc']['topic_post'] );
        if ( $thisRowTopicPost === $checkString ) {
            return $mapping;
        }
        
    }
    
    return false;
}

/** array export_portal_excelToArray(string $spreadsheetPath, int $workSheetNumber = 0, int $rowwOffset = 0)
  *
  *  Given a path to an Excel file, will read the file and return the contents within it, pased as an array.
  */
function export_portal_excelToArray($spreadsheetPath, $workSheetNumber = 0, $rowwOffset = 0) {

    // Include the PHPExcel library
    export_portal_includePhpExcel();
    
    // load the spreadsheet
    $objPHPExcel = PHPExcel_IOFactory::load($spreadsheetPath);
    
    $excelHeaders = array();
    $excelArray = array();
    
    $currentWkSheetNumb = -1;
    foreach ($objPHPExcel->getWorksheetIterator() as $worksheet) {
    
        $currentWkSheetNumb++;
    
        if ( $workSheetNumber === $currentWkSheetNumb ) {
        
            $highestRow = $worksheet->getHighestRow(); // e.g. 10
            $highestColumn = $worksheet->getHighestColumn(); // e.g 'F'
            $highestColumnIndex = PHPExcel_Cell::columnIndexFromString($highestColumn);
            $nrColumns = ord($highestColumn) - 64;

            // Get the headers - assume the cells on the first row are headers
            for ($col = 0; $col < $highestColumnIndex; ++ $col) {
                $excelHeaders[$col] = $worksheet->getCellByColumnAndRow($col, 1 + $rowwOffset)->getValue();
            }
            
            for ($row = 2 + $rowwOffset; $row <= $highestRow; ++ $row) {
                $excelArray['row-' . $row] = array(
                    'assoc' => array(),
                    'cols' => array()
                );
                for ($col = 0; $col < $highestColumnIndex; ++ $col) {
                    $thisColHeader = $excelHeaders[$col];
                    $thisCellValue = $worksheet->getCellByColumnAndRow($col, $row)->getValue();
                    $excelArray['row-' . $row]['assoc'][$thisColHeader] = $thisCellValue;
                    $excelArray['row-' . $row]['cols'][$col] = $thisCellValue;
                }
            }
        
        }
    }
    
    // Array cleanup - Check the last rows of the array, if all of the cells (coumns) for this row are null, remove the row
    $rowsInArray_ReverseOrder = array_reverse( array_keys($excelArray) );
    foreach ( $rowsInArray_ReverseOrder as $rowKey ) {
        if ( strval(@implode('', $excelArray[$rowKey]['cols'])) === '' ) { // If there is no information (if all the elements in this array are null)...
            unset( $excelArray[$rowKey] ); // Remove this row from the array
        } else {
            break; // Do not check any more rows in the array
        }
    }
    
    return $excelArray;
}

/** bool export_portal_includePhpExcel()
  *
  *  Searches for and inclues the PHPExcel library
  *  Returns TRUE only when the PHPExcel library is found and includes, FALSE otherwise.
  */
function export_portal_includePhpExcel() {

    if ( is_dir('sites/all/libraries/PHPExcel') && strpos(get_include_path(), 'sites/all/libraries/PHPExcel') === false ) {
        set_include_path( get_include_path() . PATH_SEPARATOR . 'sites/all/libraries/PHPExcel/' );
    }
    
    if ( !@include_once('PHPExcel.php') ) {
        return false;
    } else {
        return true;
    }

}
